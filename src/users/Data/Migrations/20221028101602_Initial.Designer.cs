// <auto-generated />
using System;
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221028101602_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.RequisiteDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("CreditCardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character(16)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character(12)")
                        .IsFixedLength();

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RequisiteDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BankName = "Kaspi",
                            CreditCardNumber = "1234567890123456",
                            PhoneNumber = "+77761667060",
                            UserId = new Guid("c9fc369d-d0ca-4709-9494-d792ecbc1cc6")
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9fc369d-d0ca-4709-9494-d792ecbc1cc6"),
                            Email = "admin@gmail.com",
                            Firstname = "admin",
                            Hash = new byte[] { 37, 156, 226, 181, 6, 224, 205, 132, 131, 82, 229, 83, 214, 250, 77, 235, 220, 179, 91, 109, 131, 59, 197, 59, 36, 80, 74, 118, 23, 113, 90, 206 },
                            Lastname = "admin",
                            Salt = new byte[] { 104, 213, 252, 245, 152, 207, 147, 253, 225, 75, 150, 144, 129, 66, 53, 69, 196, 53, 214, 93, 15, 121, 99, 215, 134, 133, 122, 32, 13, 147, 23, 159, 4, 195, 10, 226, 157, 28, 191, 199, 68, 19, 48, 89, 36, 37, 237, 228, 232, 18, 4, 92, 90, 138, 19, 20, 157, 35, 239, 233, 254, 31, 25, 122 }
                        });
                });

            modelBuilder.Entity("Domain.Models.RequisiteDetails", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Requisites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Requisites");
                });
#pragma warning restore 612, 618
        }
    }
}
